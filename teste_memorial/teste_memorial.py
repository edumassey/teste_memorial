# -*- coding: utf-8 -*-
"""
/***************************************************************************
 TesteMemorial
                                 A QGIS plugin
 Teste de plugin para gerar um memorial de CAR
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-05-17
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Eduardo Massey
        email                : edumassey@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
# -*- coding: utf-8 -*-
"""
TesteMemorial
A QGIS plugin for generating a CAR memorial
"""

# -*- coding: utf-8 -*-
"""
TesteMemorial
A QGIS plugin for generating a CAR memorial
"""

from qgis.PyQt.QtCore import QSettings, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QMessageBox, QInputDialog
from qgis.core import (
    QgsProject,
    QgsProcessingFeedback,
    QgsProcessingException,
    QgsGeometry
)
from qgis import processing

import os.path

from .resources import *
from .teste_memorial_dialog import TesteMemorialDialog


class TesteMemorial:
    def __init__(self, iface):
        self.iface = iface
        self.plugin_dir = os.path.dirname(__file__)
        self.geom = QgsGeometry()
        self.points = None
        self.distancesAndAzimuths = None
        self.area = self.geom.area()

        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'TesteMemorial_{}.qm'.format(locale)
        )

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        self.actions = []
        self.menu = self.tr(u'Teste Memorial')
        self.first_start = True

    def tr(self, message):
        return QCoreApplication.translate('TesteMemorial', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None,
    ):
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)

        self.actions.append(action)

        return action

    def initGui(self):
        icon_path = ':/plugins/teste_memorial/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Teste Memorial'),
            callback=self.run,
            parent=self.iface.mainWindow(),
        )

    def unload(self):
        for action in self.actions:
            self.iface.removePluginMenu(self.tr(u'Teste Memorial'), action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        if self.first_start:
            self.first_start = False
            self.dlg = TesteMemorialDialog()
            self.dlg.toolButton.clicked.connect(self.open_file_dialog)

        if not hasattr(self, 'dlg'):
            self.dlg = TesteMemorialDialog()

        self.dlg.show()
        result = self.dlg.exec_()

    def open_file_dialog(self):
        layers = QgsProject.instance().mapLayers().values()
        layer_names = [layer.name() for layer in layers]
        if not layer_names:
            QMessageBox.information(
                self.dlg, "No Layers", "No vector layers found in the project."
            )
            return

        layer_name, ok = QInputDialog.getItem(
            self.dlg, "SELECIONE A CAMADA", "Selecione a camada vetorial", layer_names, 0, False
        )
        if ok and layer_name:
            layer = QgsProject.instance().mapLayersByName(layer_name)[0]
            parameters = {'INPUT': layer.source(), 'OUTPUT': 'TEMPORARY_OUTPUT'}
            feedback = QgsProcessingFeedback()
            try:
                result = processing.run(
                    "native:multiparttosingleparts", parameters, feedback=feedback
                )
                output_layer = result['OUTPUT']
                # Add "Unique Parts" to the layer name
                output_layer.setName(layer_name + " - Partes simples")
                print("Output layer:", output_layer)
                self.add_layer_to_project(output_layer)
            except QgsProcessingException as e:
                print("Error:", str(e))

            self.dlg.comboBox.addItem(layer_name)

    def add_layer_to_project(self, layer):
        QgsProject.instance().addMapLayer(layer)
        layer_instance = QgsProject.instance().mapLayer(layer.id())
        if layer_instance:
            root = QgsProject.instance().layerTreeRoot()
            layer_node = root.findLayer(layer.id())
            if layer_node:
                layer_node.setItemVisibilityChecked(True)
                self.iface.layerTreeView().setCurrentLayer(layer_node.layer())
                features = layer_instance.getFeatures()
                layer_instance.selectByIds([f.id() for f in features])

        self.temp_layer = layer
